import aiohttp

from custom_components.senec.pysenec_ha.constants import SYSTEM_STATE_NAME
from custom_components.senec.pysenec_ha.util import parse

# 4: "INITIAL CHARGE",
# 5: "MAINTENANCE CHARGE",
# 8: "MAN. SAFETY CHARGE",
# 10: "FULL CHARGE",
# 11: "EQUALIZATION: CHARGE",
# 12: "DESULFATATION: CHARGE",
# 14: "CHARGE",
# 43: "CAPACITY TEST: CHARGE",
BAT_STATUS_CHARGE = {4,5,8,10,11,12,14,43}

# 16: "DISCHARGE",
# 17: "PV + DISCHARGE",
# 18: "GRID + DISCHARGE"
BAT_STATUS_DISCHARGE = {16,17,18}

class Senec:
    """Senec Home Battery Sensor"""

    def __init__(self, host, websession):
        self.host = host
        self.websession: aiohttp.websession = websession
        self.url = f"http://{host}/lala.cgi"

    @property
    def system_state(self) -> str:
        """
        Textual descritpion of energy status

        """
        value = self._raw["ENERGY"]["STAT_STATE"]
        return SYSTEM_STATE_NAME.get(value, "UNKNOWN")

    @property
    def raw_status(self) -> dict:
        """
        Raw dict with all information

        """
        return self._raw

    @property
    def house_power(self) -> float:
        """
        Current power consumption (W)

        """
        return self._raw["ENERGY"]["GUI_HOUSE_POW"]

    @property
    def house_total_consumption(self) -> float:
        """
        Total energy used by house (kWh)

        Does not include Wallbox.
        """
        return self._raw["STATISTIC"]["LIVE_HOUSE_CONS"]

    @property
    def solar_generated_power(self) -> float:
        """
        Current power generated by solar panels (W)

        """
        return abs(self._raw["ENERGY"]["GUI_INVERTER_POWER"])

    @property
    def solar_total_generated(self) -> float:
        """
        Total energy generated by solar panels (kWh)

        """
        return self._raw["STATISTIC"]["LIVE_PV_GEN"]

    @property
    def battery_charge_percent(self) -> float:
        """
        Current battery charge value (%)

        """
        return self._raw["ENERGY"]["GUI_BAT_DATA_FUEL_CHARGE"]

    @property
    def battery_charge_power(self) -> float:
        """
        Current battery charging power (W)

        """
        value = self._raw["ENERGY"]["GUI_BAT_DATA_POWER"]
        if value > 0:
            if self.is_battery_state_charging():
                return value
        return 0

    @property
    def battery_discharge_power(self) -> float:
        """
        Current battery discharging power (W)

        """
        value = self._raw["ENERGY"]["GUI_BAT_DATA_POWER"]
        if value < 0:
            if self.is_battery_state_discharging():
                return abs(value)
        return 0

    @property
    def battery_state_power(self) -> float:
        """
        Battery charging power (W)

        Value is positive when battery is charging
        Value is negative when battery is discharging.
        """
        return self._raw["ENERGY"]["GUI_BAT_DATA_POWER"]

    @property
    def battery_total_charged(self) -> float:
        """
        Total energy charged to battery (kWh)

        """
        return self._raw["STATISTIC"]["LIVE_BAT_CHARGE"]

    @property
    def battery_total_discharged(self) -> float:
        """
        Total energy discharged from battery (kWh)

        """
        return self._raw["STATISTIC"]["LIVE_BAT_DISCHARGE"]

    @property
    def grid_imported_power(self) -> float:
        """
        Current power imported from grid (W)

        """
        value = self._raw["ENERGY"]["GUI_GRID_POW"]
        if value > 0:
            return value
        return 0

    @property
    def grid_exported_power(self) -> float:
        """
        Current power exported to grid (W)

        """
        value = self._raw["ENERGY"]["GUI_GRID_POW"]
        if value < 0:
            return abs(value)
        return 0

    @property
    def grid_state_power(self) -> float:
        """
        Grid exchange power (W)

        Value is positive when power is imported from grid.
        Value is negative when power is exported to grid.
        """
        return self._raw["ENERGY"]["GUI_GRID_POW"]

    @property
    def grid_total_export(self) -> float:
        """
        Total energy exported to grid export (kWh)

        """
        return self._raw["STATISTIC"]["LIVE_GRID_EXPORT"]

    @property
    def grid_total_import(self) -> float:
        """
        Total energy imported from grid (kWh)

        """
        return self._raw["STATISTIC"]["LIVE_GRID_IMPORT"]

    @property
    def battery_temp(self) -> float:
        """
        Current battery temperature

        """
        return self._raw["TEMPMEASURE"]["BATTERY_TEMP"]

    @property
    def case_temp(self) -> float:
        """
        Current case temperature

        """
        return self._raw["TEMPMEASURE"]["CASE_TEMP"]

    @property
    def mcu_temp(self) -> float:
        """
        Current controller temperature

        """
        return self._raw["TEMPMEASURE"]["MCU_TEMP"]

    @property
    def solar_mpp1_potential(self) -> float:
        return self._raw["PV1"]["MPP_VOL"][0]

    @property
    def solar_mpp1_current(self) -> float:
        return self._raw["PV1"]["MPP_CUR"][0]

    @property
    def solar_mpp1_power(self) -> float:
        return self._raw["PV1"]["MPP_POWER"][0]

    @property
    def solar_mpp2_potential(self) -> float:
        return self._raw["PV1"]["MPP_VOL"][1]

    @property
    def solar_mpp2_current(self) -> float:
        return self._raw["PV1"]["MPP_CUR"][1]

    @property
    def solar_mpp2_power(self) -> float:
        return self._raw["PV1"]["MPP_POWER"][1]

    @property
    def solar_mpp3_potential(self) -> float:
        return self._raw["PV1"]["MPP_VOL"][2]

    @property
    def solar_mpp3_current(self) -> float:
        return self._raw["PV1"]["MPP_CUR"][2]

    @property
    def solar_mpp3_power(self) -> float:
        return self._raw["PV1"]["MPP_POWER"][2]

    def is_battery_empty(self) -> bool:
        # 15: "BATTERY EMPTY",
        bat_state_is_empty = self._raw["ENERGY"]["STAT_STATE"] == 15
        bat_percent_is_zero = self._raw["ENERGY"]["GUI_BAT_DATA_FUEL_CHARGE"] == 0
        return bat_state_is_empty or bat_percent_is_zero

    def is_battery_state_charging(self) -> bool:
        return self._raw["ENERGY"]["STAT_STATE"] in BAT_STATUS_CHARGE

    def is_battery_state_discharging(self) -> bool:
        return self._raw["ENERGY"]["STAT_STATE"] in BAT_STATUS_DISCHARGE

    async def update(self):
        await self.read_senec_v31()

    async def read_senec_v31(self):
        """Read values used by webinterface from Senec Home v2.1

        Note: Not all values are "high priority" and reading everything causes problems with Senec device, i.e. no sync with Senec cloud possible.
        """
        form = {
            "ENERGY": {
                "STAT_STATE": "",
                "GUI_BAT_DATA_POWER": "",
                "GUI_INVERTER_POWER": "",
                "GUI_HOUSE_POW": "",
                "GUI_GRID_POW": "",
                "GUI_BAT_DATA_FUEL_CHARGE": "",
                "GUI_CHARGING_INFO": "",
                "GUI_BOOSTING_INFO": "",
                "GUI_BAT_DATA_POWER": "",
                "GUI_BAT_DATA_VOLTAGE": "",
                "GUI_BAT_DATA_CURRENT": "",
                "GUI_BAT_DATA_FUEL_CHARGE": "",
                "GUI_BAT_DATA_OA_CHARGING": "",
                "STAT_LIMITED_NET_SKEW": "",
            },
            "STATISTIC": {
                "LIVE_BAT_CHARGE": "",
                "LIVE_BAT_DISCHARGE": "",
                "LIVE_GRID_EXPORT": "",
                "LIVE_GRID_IMPORT": "",
                "LIVE_HOUSE_CONS": "",
                "LIVE_PV_GEN": "",
            },
            "TEMPMEASURE": {
                "BATTERY_TEMP": "",
                "CASE_TEMP": "",
                "MCU_TEMP": "",
            },
            "PV1": {"POWER_RATIO": "",
                    "POWER_RATIO_L1": "",
                    "POWER_RATIO_L2": "",
                    "POWER_RATIO_L3": "",
                    "MPP_VOL": "",
                    "MPP_CUR": "",
                    "MPP_POWER": ""},
            "PWR_UNIT": {"POWER_L1": "", "POWER_L2": "", "POWER_L3": ""},
            "PM1OBJ1": {"FREQ": "", "U_AC": "", "I_AC": "", "P_AC": "", "P_TOTAL": ""},
            "PM1OBJ2": {"FREQ": "", "U_AC": "", "I_AC": "", "P_AC": "", "P_TOTAL": ""},
        }

        async with self.websession.post(self.url, json=form) as res:
            res.raise_for_status()
            self._raw = parse(await res.json())

        async def read_senec_v21(self):
            """Read values used by webinterface from Senec Home v2.1

            Note: Not all values are "high priority" and reading everything causes problems with Senec device, i.e. no sync with Senec cloud possible.
            """
            form = {
                "ENERGY": {
                    "STAT_STATE": "",
                    "GUI_BAT_DATA_POWER": "",
                    "GUI_INVERTER_POWER": "",
                    "GUI_HOUSE_POW": "",
                    "GUI_GRID_POW": "",
                    "GUI_BAT_DATA_FUEL_CHARGE": "",
                    "GUI_CHARGING_INFO": "",
                    "GUI_BOOSTING_INFO": "",
                    "GUI_BAT_DATA_POWER": "",
                    "GUI_BAT_DATA_VOLTAGE": "",
                    "GUI_BAT_DATA_CURRENT": "",
                    "GUI_BAT_DATA_FUEL_CHARGE": "",
                    "GUI_BAT_DATA_OA_CHARGING": "",
                    "STAT_LIMITED_NET_SKEW": "",
                },
                "STATISTIC": {
                    "LIVE_BAT_CHARGE": "",
                    "LIVE_BAT_DISCHARGE": "",
                    "LIVE_GRID_EXPORT": "",
                    "LIVE_GRID_IMPORT": "",
                    "LIVE_HOUSE_CONS": "",
                    "LIVE_PV_GEN": "",
                },
                "TEMPMEASURE": {
                    "BATTERY_TEMP": "",
                    "CASE_TEMP": "",
                    "MCU_TEMP": "",
                },
                "PV1": {"POWER_RATIO": ""},
                "PWR_UNIT": {"POWER_L1": "", "POWER_L2": "", "POWER_L3": ""},
                "PM1OBJ1": {"FREQ": "", "U_AC": "", "I_AC": "", "P_AC": "", "P_TOTAL": ""},
                "PM1OBJ2": {"FREQ": "", "U_AC": "", "I_AC": "", "P_AC": "", "P_TOTAL": ""},
            }

            async with self.websession.post(self.url, json=form) as res:
                res.raise_for_status()
                self._raw = parse(await res.json())

        async def read_senec_v21_all(self):
            """Read ALL values from Senec Home v2.1

            Note: This causes high demand on the SENEC machine so it shouldn't run too often. Adverse effects: No sync with Senec possible if called too often.
            """
            form = {
                "STATISTIC": {},
                "ENERGY": {},
                "FEATURES": {},
                "LOG": {},
                "SYS_UPDATE": {},
                "WIZARD": {},
                "BMS": {},
                "BAT1": {},
                "BAT1OBJ1": {},
                "BAT1OBJ2": {},
                "BAT1OBJ2": {},
                "BAT1OBJ3": {},
                "BAT1OBJ4": {},
                "PWR_UNIT": {},
                "PV1": {},
            }

            async with self.websession.post(self.url, json=form) as res:
                res.raise_for_status()
                self._raw = parse(await res.json())
